{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Okidex platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "userType": {
          "type": "string",
          "description": "The type of user (founder, investor, talent)."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "profileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: User 1:1 UserProfile)"
        }
      },
      "required": [
        "id",
        "userType",
        "email",
        "profileId"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Detailed profile information for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the user."
        },
        "websiteUrl": {
          "type": "string",
          "description": "URL to the user's website or portfolio.",
          "format": "uri"
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "companyLogoUrl": {
          "type": "string",
          "description": "URL of the user's company logo, if applicable.",
          "format": "uri"
        },
        "skills": {
          "type": "array",
          "description": "List of skills.",
          "items": {
            "type": "string"
          }
        },
        "industry": {
          "type": "string",
          "description": "The industry that the user works in"
        }
      },
      "required": [
        "id",
        "displayName"
      ]
    },
    "Match": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Match",
      "type": "object",
      "description": "Represents a match between two users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Match entity."
        },
        "user1Id": {
          "type": "string",
          "description": "Reference to User. (Relationship: User N:N User via Match)"
        },
        "user2Id": {
          "type": "string",
          "description": "Reference to User. (Relationship: User N:N User via Match)"
        },
        "matchDate": {
          "type": "string",
          "description": "Date and time when the match was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "user1Id",
        "user2Id",
        "matchDate"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message exchanged between two users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Message entity."
        },
        "senderId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Message)"
        },
        "receiverId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Message)"
        },
        "matchId": {
          "type": "string",
          "description": "Reference to Match. (Relationship: Match 1:N Message)"
        },
        "content": {
          "type": "string",
          "description": "The content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "Date and time when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "senderId",
        "receiverId",
        "matchId",
        "content",
        "timestamp"
      ]
    },
    "JobPosting": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "JobPosting",
      "type": "object",
      "description": "Represents a job posting on the job board.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the JobPosting entity."
        },
        "founderId": {
          "type": "string",
          "description": "Reference to User (founder). (Relationship: User 1:N JobPosting)"
        },
        "title": {
          "type": "string",
          "description": "The title of the job posting."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the job responsibilities and requirements."
        },
        "skillsRequired": {
          "type": "array",
          "description": "List of required skills for the job.",
          "items": {
            "type": "string"
          }
        },
        "postedDate": {
          "type": "string",
          "description": "Date and time when the job posting was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "founderId",
        "title",
        "description",
        "postedDate"
      ]
    },
    "InvestmentOpportunity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvestmentOpportunity",
      "type": "object",
      "description": "Represents a startup investment opportunity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the InvestmentOpportunity entity."
        },
        "founderId": {
          "type": "string",
          "description": "Reference to User (founder). (Relationship: User 1:N InvestmentOpportunity)"
        },
        "name": {
          "type": "string",
          "description": "Name of the startup seeking investment."
        },
        "description": {
          "type": "string",
          "description": "A summary of the startup and its business model."
        },
        "industry": {
          "type": "string",
          "description": "The industry that the startup operates in."
        },
        "financialSummaryId": {
          "type": "string",
          "description": "Reference to FinancialSummary. (Relationship: InvestmentOpportunity 1:1 FinancialSummary)"
        },
        "datePublished": {
          "type": "string",
          "description": "Date and time when the opportunity was published.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "founderId",
        "name",
        "description",
        "industry",
        "financialSummaryId",
        "datePublished"
      ]
    },
    "InvestmentThesis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvestmentThesis",
      "type": "object",
      "description": "Represents an anonymous investment thesis posted by an investor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the InvestmentThesis entity."
        },
        "investorId": {
          "type": "string",
          "description": "Reference to User (investor). (Relationship: User 1:N InvestmentThesis)"
        },
        "thesisStatement": {
          "type": "string",
          "description": "The investment thesis statement."
        },
        "datePublished": {
          "type": "string",
          "description": "Date and time when the thesis was published.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "investorId",
        "thesisStatement",
        "datePublished"
      ]
    },
    "FinancialSummary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinancialSummary",
      "type": "object",
      "description": "Represents a summary of a startup's financial data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FinancialSummary entity."
        },
        "revenue": {
          "type": "number",
          "description": "Annual revenue of the startup."
        },
        "expenses": {
          "type": "number",
          "description": "Annual expenses of the startup."
        },
        "profit": {
          "type": "number",
          "description": "Annual profit of the startup."
        },
        "valuation": {
          "type": "number",
          "description": "Current valuation of the startup."
        },
        "keyMetrics": {
          "type": "array",
          "description": "List of key performance indicators.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "revenue",
        "expenses",
        "profit",
        "valuation"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user accounts. User documents are secured via path-based rules, ensuring only the authenticated user can access their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/user_profiles/{profileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information.  Since users can only view their own profile, the path includes the profileId. It could also have been a subcollection, but that would limit querying to a specific user. This design optimizes for querying across profiles, if needed in the future.",
          "params": [
            {
              "name": "profileId",
              "description": "The unique identifier of the user profile."
            }
          ]
        }
      },
      {
        "path": "/matches/{matchId}",
        "definition": {
          "entityName": "Match",
          "schema": {
            "$ref": "#/backend/entities/Match"
          },
          "description": "Stores matches between users.  Security rules will ensure that only the matched users can access the match document.",
          "params": [
            {
              "name": "matchId",
              "description": "The unique identifier of the match."
            }
          ]
        }
      },
      {
        "path": "/matches/{matchId}/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages between matched users. Includes denormalized 'senderId' and 'receiverId' for authorization independence. Security rules ensure only users involved in the match can access the messages.",
          "params": [
            {
              "name": "matchId",
              "description": "The unique identifier of the match."
            },
            {
              "name": "messageId",
              "description": "The unique identifier of the message."
            }
          ]
        }
      },
      {
        "path": "/job_postings/{jobPostingId}",
        "definition": {
          "entityName": "JobPosting",
          "schema": {
            "$ref": "#/backend/entities/JobPosting"
          },
          "description": "Stores job postings created by founders.  Security rules ensure only authenticated users can create job postings and that only talent can view them.",
          "params": [
            {
              "name": "jobPostingId",
              "description": "The unique identifier of the job posting."
            }
          ]
        }
      },
      {
        "path": "/investment_opportunities/{investmentOpportunityId}",
        "definition": {
          "entityName": "InvestmentOpportunity",
          "schema": {
            "$ref": "#/backend/entities/InvestmentOpportunity"
          },
          "description": "Stores investment opportunities created by founders. Security rules ensure only authenticated users can create investment opportunities and that only investors can view them.",
          "params": [
            {
              "name": "investmentOpportunityId",
              "description": "The unique identifier of the investment opportunity."
            }
          ]
        }
      },
      {
        "path": "/investment_theses/{investmentThesisId}",
        "definition": {
          "entityName": "InvestmentThesis",
          "schema": {
            "$ref": "#/backend/entities/InvestmentThesis"
          },
          "description": "Stores investment theses posted by investors. Security rules will be applied to ensure only investors can create them.",
          "params": [
            {
              "name": "investmentThesisId",
              "description": "The unique identifier of the investment thesis."
            }
          ]
        }
      },
      {
        "path": "/financial_summaries/{financialSummaryId}",
        "definition": {
          "entityName": "FinancialSummary",
          "schema": {
            "$ref": "#/backend/entities/FinancialSummary"
          },
          "description": "Stores financial summaries for investment opportunities. Each document is related to an InvestmentOpportunity via the financialSummaryId field. Security rules ensure that only authorized users (e.g., investors) can access the financial summaries associated with InvestmentOpportunity documents they have access to.",
          "params": [
            {
              "name": "financialSummaryId",
              "description": "The unique identifier of the financial summary."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Okidex platform, facilitating connections between founders, investors, and talent. It emphasizes authorization independence and scalable security rules.\n\n*   **Authorization Independence:** Achieved through denormalization. For instance, the `messages` subcollection includes denormalized `senderId` and `receiverId` fields.  This ensures that checking message access doesn't require fetching the parent `Match` document.\n*   **QAPs:**\n    *   Secure `list` operations are supported via structural segregation.  Private user data is stored under `/users/{userId}`, ensuring that listing users doesn't expose sensitive information.  Job postings and investment opportunities have their own collections with appropriate security rules to filter listings based on user type.\n    *   The membership map pattern is not applicable in this particular context as there are no collaborative entities involving a dynamic number of users.\n\n*   **Data Modeling**: leverages path-based ownership for user-owned data and segregates data based on access requirements.\n"
  }
}
