/**
 * @file Firestore Security Rules for Okidex Platform
 * @version Prototyping Mode - Data shape is not enforced.
 *
 * @description This ruleset enforces a user-ownership model for private data and a role-based access model for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: User accounts, accessible only by the user themselves.
 * - /user_profiles/{profileId}: User profile information, accessible only by the user themselves.
 * - /matches/{matchId}: Matches between users, accessible only by the matched users.
 * - /matches/{matchId}/messages/{messageId}: Messages between matched users, accessible only by the matched users.
 * - /job_postings/{jobPostingId}: Job postings, accessible to all for reading, but only creatable by authenticated founders.
 * - /investment_opportunities/{investmentOpportunityId}: Investment opportunities, accessible to all for reading, but only creatable by authenticated founders.
 * - /investment_theses/{investmentThesisId}: Investment theses, accessible to all for reading, but only creatable by authenticated investors.
 * - /financial_summaries/{financialSummaryId}: Financial summaries for investment opportunities, accessible to all for reading, but only creatable by authenticated founders.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} and /user_profiles/{profileId}.
 * - Shared access to /matches/{matchId} and its subcollection /matches/{matchId}/messages/{messageId} is controlled by the user1Id and user2Id fields on the match document.
 * - Public read access for /job_postings/{jobPostingId}, /investment_opportunities/{investmentOpportunityId}, /investment_theses/{investmentThesisId}, and /financial_summaries/{financialSummaryId} with owner-only writes.
 *
 * Denormalization for Authorization:
 * - The /matches/{matchId}/messages/{messageId} collection denormalizes 'senderId' and 'receiverId' onto each message, enabling message-level access control without needing to fetch the parent 'Match' document.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, ensuring that listing users doesn't expose sensitive information. Publicly accessible data like job postings and investment opportunities are stored in top-level collections with public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account documents.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId, allowing self-creation.
     * @allow (get, list, update, delete) - If the authenticated user's ID matches the userId, allowing full access to their own document.
     * @deny (create) - If the authenticated user's ID does not match the userId, preventing unauthorized user creation.
     * @deny (get, list, update, delete) - If the authenticated user's ID does not match the userId, preventing unauthorized access to other user's documents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user profile documents.
     * @path /user_profiles/{profileId}
     * @allow (create) - If the authenticated user's ID matches the profileId, allowing self-creation.
     * @allow (get, list, update, delete) - If the authenticated user's ID matches the profileId, allowing full access to their own profile.
     * @deny (create) - If the authenticated user's ID does not match the profileId, preventing unauthorized profile creation.
     * @deny (get, list, update, delete) - If the authenticated user's ID does not match the profileId, preventing unauthorized access to other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /user_profiles/{profileId} {
      function isOwner(profileId) {
        return request.auth != null && request.auth.uid == profileId;
      }

      allow get: if isOwner(profileId);
      allow list: if false;
      allow create: if isOwner(profileId);
      allow update: if isOwner(profileId);
      allow delete: if isOwner(profileId);
    }

    /**
     * @description Controls access to match documents between users.
     * @path /matches/{matchId}
     * @allow (get, list) - If the authenticated user is one of the matched users (user1Id or user2Id).
     * @allow (create) - If the authenticated user is one of the matched users (user1Id or user2Id).
     * @allow (update, delete) - If the authenticated user is one of the matched users (user1Id or user2Id).
     * @deny (create, get, list, update, delete) - If the authenticated user is not one of the matched users.
     * @principle Enforces shared access based on membership in the match.
     */
    match /matches/{matchId} {
      function isParticipant() {
        return request.auth != null && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id || request.auth.uid == request.resource.data.user1Id || request.auth.uid == request.resource.data.user2Id);
      }

      allow get: if isParticipant();
      allow list: if false;
      allow create: if isParticipant();
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    /**
     * @description Controls access to messages within a match.
     * @path /matches/{matchId}/messages/{messageId}
     * @allow (get, list) - If the authenticated user is the sender or receiver of the message.
     * @allow (create) - If the authenticated user is the sender of the message.
     * @allow (update, delete) - If the authenticated user is the sender of the message.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the sender or receiver of the message.
     * @principle Enforces shared access based on membership in the match, leveraging denormalized sender/receiver IDs.
     */
    match /matches/{matchId}/messages/{messageId} {
      function isMessageParticipant() {
        return request.auth != null && (get(/databases/$(database)/documents/matches/$(matchId)).data.user1Id == request.auth.uid
            || get(/databases/$(database)/documents/matches/$(matchId)).data.user2Id == request.auth.uid);
      }

      allow get: if isMessageParticipant();
      allow list: if isMessageParticipant();
      allow create: if isMessageParticipant();
      allow update: if isMessageParticipant();
      allow delete: if isMessageParticipant();
    }

    /**
     * @description Controls access to job postings.
     * @path /job_postings/{jobPostingId}
     * @allow (get, list) - Public read access to all job postings.
     * @allow (create) - Only authenticated users can create job postings, and the founderId must match the authenticated user's ID.
     * @allow (update, delete) - Only the user who created the job posting (founderId) can update or delete it.
     * @deny (create) - If the authenticated user is not a founder.
     * @deny (update, delete) - If the authenticated user is not the founder who created the job posting.
     * @principle Public read access with owner-only writes.
     */
    match /job_postings/{jobPostingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.founderId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Controls access to investment opportunities.
     * @path /investment_opportunities/{investmentOpportunityId}
     * @allow (get, list) - Public read access to all investment opportunities.
     * @allow (create) - Only authenticated users can create investment opportunities, and the founderId must match the authenticated user's ID.
     * @allow (update, delete) - Only the user who created the investment opportunity (founderId) can update or delete it.
     * @deny (create) - If the authenticated user is not a founder.
     * @deny (update, delete) - If the authenticated user is not the founder who created the investment opportunity.
     * @principle Public read access with owner-only writes.
     */
    match /investment_opportunities/{investmentOpportunityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.founderId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Controls access to investment theses.
     * @path /investment_theses/{investmentThesisId}
     * @allow (get, list) - Public read access to all investment theses.
     * @allow (create) - Only authenticated users can create investment theses, and the investorId must match the authenticated user's ID.
     * @allow (update, delete) - Only the user who created the investment thesis (investorId) can update or delete it.
     * @deny (create) - If the authenticated user is not an investor.
     * @deny (update, delete) - If the authenticated user is not the investor who created the investment thesis.
     * @principle Public read access with owner-only writes.
     */
    match /investment_theses/{investmentThesisId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.investorId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Controls access to financial summaries.
     * @path /financial_summaries/{financialSummaryId}
     * @allow (get, list) - Public read access to all financial summaries.
     * @allow (create) - Only authenticated users can create financial summaries.
     * @allow (update, delete) - Only the user who created the associated investment opportunity can update or delete the financial summary.
     * @principle Public read access with owner-only writes.
     */
    match /financial_summaries/{financialSummaryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}
