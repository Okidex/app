/**
 * @fileoverview Firestore Security Rules for Okidex Investment Match Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and role-based access to other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information, accessible only to the user.
 * - /user_profiles/{profileId}: Stores user profile data, accessible only to the user.
 * - /matches/{matchId}: Stores match data between two users. Accessible only to the matched users.
 * - /matches/{matchId}/messages/{messageId}: Stores messages between users in a match. Accessible only to users in the match.
 * - /job_postings/{jobPostingId}: Stores job postings. Accessible to all, but creation is limited to authenticated users.
 * - /investment_opportunities/{investmentOpportunityId}: Stores investment opportunities. Accessible to all, but creation is limited to authenticated users.
 * - /investment_theses/{investmentThesisId}: Stores investment theses. Creation limited to authenticated users.
 * - /financial_summaries/{financialSummaryId}: Stores financial summaries, access should be limited to authorized users (e.g., investors).
 *
 * Key Security Decisions:
 * - Users can only access their own user and profile documents.
 * - Matches and messages within matches are accessible only to the involved users.
 * - Job postings and investment opportunities are publicly readable, but creation is restricted.
 * - Data validation is limited to authorization-critical fields to facilitate rapid prototyping.
 * - "list" operations are secured to prevent unauthorized data exposure.
 *
 * Denormalization for Authorization:
 * - The /matches/{matchId}/messages/{messageId} collection denormalizes senderId and receiverId to avoid extra reads for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get, list, update, delete) User with matching ID can access their own document.
     * @deny (create) User cannot create a document with an ID that does not match their own ID.
     * @deny (get, list, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /user_profiles/{profileId} collection.
     * @path /user_profiles/{profileId}
     * @allow (create) User with matching profileId can create their own profile.
     * @allow (get, list, update, delete) User with matching profileId can access their own profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own ID.
     * @deny (get, list, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership.
     */
    match /user_profiles/{profileId} {
        function isOwner(profileId) {
          return request.auth != null && request.auth.uid == profileId;
        }

        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isOwner(profileId);
        allow create: if isSignedIn() && request.auth.uid == profileId;
        allow update: if isOwner(profileId);
        allow delete: if isOwner(profileId);
    }

    /**
     * @description Rules for the /matches/{matchId} collection.
     * @path /matches/{matchId}
     * @allow (get, list) Only users involved in the match can access the match document.
     * @allow (create) Authenticated users can create match documents. The document requires user1Id and user2Id.
     * @allow (update, delete) Only users involved in the match can update/delete it.
     * @deny (get, list) Users not part of the match cannot access the document.
     * @principle Enforces shared access based on user membership in the match.
     */
    match /matches/{matchId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant() {
          return isSignedIn() && (resource.data.user1Id == request.auth.uid || resource.data.user2Id == request.auth.uid);
        }

        function isNewParticipant() {
          return isSignedIn() && (request.resource.data.user1Id == request.auth.uid || request.resource.data.user2Id == request.auth.uid);
        }

        allow get, list: if isParticipant();
        allow create: if isSignedIn() && isNewParticipant();
        allow update: if isParticipant();
        allow delete: if isParticipant();
    }

    /**
     * @description Rules for the /matches/{matchId}/messages/{messageId} collection.
     * @path /matches/{matchId}/messages/{messageId}
     * @allow (get, list) Only users involved in the match can access messages.
     * @allow (create) Only users involved in the match can create messages. senderId must equal request.auth.uid
     * @allow (update, delete) Only the sender can update or delete the message.
     * @deny (get, list) Users not part of the match cannot access messages.
     * @principle Enforces shared access based on user membership in the match, with sender-based control for modifications.
     */
    match /matches/{matchId}/messages/{messageId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant(matchId) {
          return isSignedIn() && (get(/databases/$(database)/documents/matches/$(matchId)).data.user1Id == request.auth.uid || get(/databases/$(database)/documents/matches/$(matchId)).data.user2Id == request.auth.uid);
        }

        function isSender() {
          return isSignedIn() && resource.data.senderId == request.auth.uid;
        }

        allow get, list: if isParticipant(matchId);
        allow create: if isParticipant(matchId) && request.resource.data.senderId == request.auth.uid;
        allow update: if isSender();
        allow delete: if isSender();
    }

    /**
     * @description Rules for the /job_postings/{jobPostingId} collection.
     * @path /job_postings/{jobPostingId}
     * @allow (get, list) All users can read job postings.
     * @allow (create) Only authenticated users (founders) can create job postings. founderId must equal request.auth.uid
     * @allow (update, delete) Only the creator (founder) can update or delete job postings.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete job postings.
     * @principle Public read with owner-only writes.
     */
    match /job_postings/{jobPostingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
          return isSignedIn() && resource.data.founderId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.founderId == request.auth.uid;
        allow update: if isOwner();
        allow delete: if isOwner();
    }

    /**
     * @description Rules for the /investment_opportunities/{investmentOpportunityId} collection.
     * @path /investment_opportunities/{investmentOpportunityId}
     * @allow (get, list) All users can read investment opportunities.
     * @allow (create) Only authenticated users (founders) can create investment opportunities. founderId must equal request.auth.uid.
     * @allow (update, delete) Only the creator (founder) can update or delete investment opportunities.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete investment opportunities.
     * @principle Public read with owner-only writes.
     */
    match /investment_opportunities/{investmentOpportunityId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
          return isSignedIn() && resource.data.founderId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.founderId == request.auth.uid;
        allow update: if isOwner();
        allow delete: if isOwner();
    }

    /**
     * @description Rules for the /investment_theses/{investmentThesisId} collection.
     * @path /investment_theses/{investmentThesisId}
     * @allow (get, list) All users can read investment theses.
     * @allow (create) Only authenticated users (investors) can create investment theses. investorId must equal request.auth.uid.
     * @allow (update, delete) Only the creator (investor) can update or delete investment theses.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete investment theses.
     * @principle Public read with owner-only writes.
     */
    match /investment_theses/{investmentThesisId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
          return isSignedIn() && resource.data.investorId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.investorId == request.auth.uid;
        allow update: if isOwner();
        allow delete: if isOwner();
    }

    /**
     * @description Rules for the /financial_summaries/{financialSummaryId} collection.
     * @path /financial_summaries/{financialSummaryId}
     * @allow (get, list) All users can read financial summaries.  Access should be limited based on InvestmentOpportunity access.
     * @allow (create) Only authorized users can create financial summaries.  Need to check the link to InvestmentOpportunity.
     * @allow (update, delete) Only the creator can update or delete financial summaries.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete financial summaries.
     * @principle Public read with owner-only writes (needs review based on intended access).
     */
    match /financial_summaries/{financialSummaryId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // TODO: Add authorization logic based on InvestmentOpportunity access.
        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add authorization based on InvestmentOpportunity
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}
